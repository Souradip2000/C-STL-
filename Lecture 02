Date : 16th May, 2023
_________________________________________________________________________________________________________________________________________________________



Set is implemented in c++ using binary search tree(BST).


// Set
					
Stores only unique elements in ascending order
Cannot directly acces elements as in an arr[index_to_be_accessed]
Use iterators to access elements of the set

insert() can be replaced with emplace().

st.size() gives size of the set.

3 types of erase functions: 
  i. st.erase(iterator);
  ii. st.erase( starting iterator, ending iterator )      // [)
  iii. st.erase( key );     --> key: the element you want to delete from the set
  
 erase() -  time complexity: O(log n)
 
 find( element ) -  returns an iterator to the element 
                    if element is not present, the find function returns st.end()

Code:

set<int> st;
int n;
cin>>n;
for(int i=0; i<n; i++)
{
  int x;
  cin>>x;
  
  st.insert(x);   --> insert function is used to insert an element into the set
                      This insert function uses O(log n) time complexity
                      
  *st.begin()+2   --> access elements in a set using iterators
  
  
  st.erase(st.begin(),st.begin()+2);    --> syntax: st.erase(iterator)  --> removes the elements    // [ starting itr, ending itr )
  st.erase(4);  // 4 element will be deleted from the set
  
  auto it = st.find(7);
}






We can initialse set with any data type, including struct.

for(auto it=st.begin(); it!=st.end(); it++)
{
  cout<<*it<<" ";
}

for(auto it: st)
{
  cout<<it<<" ";
}


// To delete an entire set
st.erase(st.begin(), st.end());


Summary :-

Mehtods:
  i.    insert() / emplace()
  ii.   iterators: begin(), end(), rbegin(), rend()
  iii.  erase()
  iv.   find()
  v.    size()
  
All operations on set have log(n) time complexity, which is pretty good.
  
  
  



________________________________________________________________________________________________________________________________________________________________






// Unordered Set:




unordered_set<int> st;

Here the avg case time complexity is O(1)
But the avg case time complexity is O(n).

We should use unordered_set whenever we don't need to store the elements in ascending order because it has a better avg case time complextiy.
But if the problem will give TLE using unordered_set, then we need to switch to set.
TLE indicates the worst case of unordered_set is occurring, which is very rare.

All the methods are the same as in set.







__________________________________________________________________________________________________________________________________________________________

Date : 21st May, 2023
________________________________________________________________________________________________________________________________________________________






Multiset:



It allows us to store the same elements.
Elements are stored in ascending order.

Methods:

  insert() / emplace()
  find()  -   returns the iterator to the first elemnt matching if there are multiple similar elements
  erase(element) -   will remove all occurrences of the element
  clear() -   clears the entire set
  
  
  // to erase multiple instances, we can use:
  ms.erase(ms.find(2));
  ms.erase(ms.find(2), ms.find(2)+2)    --> will erase the next two instances of 2
  
 Time complexity : O(log n)
  
  
  
__________________________________________________________________________________________________________________________________________________________
  
  
  
  
  
  
Map:
 
 
 Stores key value pairs.
 Always sorted in linearly increasing order according to the keys.


 Time complexity: O( log n )     -->for all methods of map

 Keys are always unique in maps.
 However the same value can be assigned to multiple keys.
 
 map<string, int> mpp;
 mpp["raj"]=43;
 mpp["sandeep"]=34;
 mpp["hima"]=86;
 mpp["raj"]=12;
 
 raj key will now store 12 as its value
 
 Map always stores unique keys. Thus when the same key occurs, the value stored in the key gets overwritten.
 
 mpp.emplace("raj", 45);    --> overwrites in the same manner
 mpp.erase(mpp.find("raj"));  
 mpp.erase(mpp.begin());    --> erases the first element
 mpp.erase("raj");          --> finds the key and erases the key value pair
 mpp.clear();               --> cleans up the entire map
 mpp.erase(mpp.begin(),mpp.begin()+2);    --> clears a specific range
 auto it= mpp.find("raj");   --> points to where raj lies
 mpp.empty();                --> returns a boolean value whether map is empty or not
 mpp.find(key);              --> points to the end if key dosen't exist


// Printing a map

Because maps are stored in form of key-value pairs, they are printed in the form of pairs.

pair<int, int> pr;
pr.first = 1;
pr.second = 10;

In the case of maps, they are:     pair<string, int> pr;

for(auto it: mpp){
  cout<<it.first<<" "<<it.second;
}

for(auto it=mpp.begin(); it!=mpp.end(); i++){          // to access pairs using iterators
  cout<< it->first <<" "<< it->second;
}
 

__________________________________________________________________________________________________________________________________________________________

Thursday 22 June, 2023
__________________________________________________________________________________________________________________________________________________________



Unordered Map:

Syntax:  unordered_map<string, int> mpp;

Pairs won't be stored in order.
All the functions will be the same.

Time complexity:
Avg case : O(1)
Worst case : O(n)    --> n is the size of the container


We cannot use pair data type as key of a map. It is not allowed.


__________________________________________________________________________________________________________________________________________________________





Pair Class:


pair<int, int> pr= {1,2};
cout << pr.first;    --> 1

pair<pair<int, int>, int> pr= {{1,2}, 3};
cout<<pr.first.second;    --> 2




__________________________________________________________________________________________________________________________________________________________





Multimap: 



Syntax: multimap<int, int> mp;

All the keys are stored in sorted order.
This just can store multiple same keys.

mp.emplace("raj", 5);
mp.emplace("raj", 6);        --> then the value of raj is not overwritten here. Instead both the values get stored.

// the values with the same keys are stored in the order they are added. The pairs are not stored in sorted fashion on the basis of the values.





__________________________________________________________________________________________________________________________________________________________





Stacks:

Syntax: stack<int> st;
LIFO
(implemented using arrays or LL)

Mehtods: 
  1. st.push(element)  or  st.emplace(element)
  2. st.pop()
  3. st.top()
  4. st.size()
  5. st.empty()


To delete the entire stack: 

while(!st.empty()){
  st.pop();
}


if we call st.top() function on empty stack, it will give us a Runtime error

while(!st.empty()){      --> this checking before calling the function will help avoid errors.
  cout<<st.top();
}




__________________________________________________________________________________________________________________________________________________________





Queue: 

Syntax: queue<int> q={1,2,3,4,5};
                OR
        queue<int> q;
        q.push(1);
        q.push(5);
        q.push(3);
FIFO

Methods:
  1.push()
  2.pop()
  3.front()
  4.size()
  5.empty()


All the methdos take O(1) i.e. constant time complexity.
Except deleting all the elements of a queue. It takes O(n) time complexity.






__________________________________________________________________________________________________________________________________________________________


There's no iterator concept in stacks and queues.

__________________________________________________________________________________________________________________________________________________________




Priority queue:

Syntax: priority_queue<int> pq;

stores all elements in sorted order and does the operations in O(log n) time complexity.
Unordered set used to have the worst case time complexity of O(n). It helps deal with the problem.

Methods:
  1. push()
  2. pop()
  3. top()
  4. size()
  5. empty()

It stores the elements in descending order.
Uses the concept of heap sort. (Heapify)

Can be implemented using a binary search tree. ( also using arrays, linked list and heap data structure ).

The largest element is at the top of the binary search tree.
The smaller element goes to the left node and the larger element goes to the right node.
Both the sub-trees of the root node are also BSTs. i.e. they follow the above two properties.


priority_queue<pair<int, int>> pq;
pq.push(1,4);
pq.push(1,6);
pq.push(1,5);                  // the elements will be stored in the fashion (1,6), (1,5), (1,4).
                               // if the first elements in a pair are equal, it will go to check the order in the second element



// to store elements in ascending order ( minimum priority queue )
pq.push(-5);
pq.push(-6);
pq.push(-1);
Here elements will be stored in the order -1, -5, -6.
While printing : cout<<-1*pq.top()<<" "; will print the elements in ascending order.


Minimum priority queue:
Syntax: 			priority_queue<T, vector<T>, greater<T>> pq;					// T is the template data type - it can be anything
							priority_queue<int, vector<int>, greater<int>> pq;		// after using this we won't have to multiply by -1
						  This will store the elements in ascending order.



Set - stores elements in sorted manner but can only store unique elements : time complexity: O(log n)
unordered_set - stores unique elements in unordered manner : time complexity : O(1) but worst case is O(n)
priority_queue - allows duplicates and stores all in sorted order : time complexity : O(log n)






__________________________________________________________________________________________________________________________________________________________






Dequeue:

	It is a doubly ended queue.

It has the following operations:
		1. push_back()
		2. push_front()
		3. pop_back()
		4. pop_front()
		5. iterators : begin(), end(), rbegin(), rend()
		6. size()
		7. clear()
		8. empty()





__________________________________________________________________________________________________________________________________________________________






List:

list<int> ls;

Implemented using a doubly linked list.

It has the following operations:
		1. push_back()
		2. push_front()
		3. pop_back()
		4. pop_front()
		5. iterators : begin(), end(), rbegin(), rend()
		6. size()
		7. clear()
		8. empty()
		9. remove(element)			--> this function has time complexity: O(1)

We usually use lists when we need all types of operations.





__________________________________________________________________________________________________________________________________________________________





// Program:	To take input n numbers, store them and print them in increasing order. 


#include <bits/stdc++.h>
using namespace std;

int main()
{
    multiset<int> ms;
    for(int i=0; i<5; i++)
    {
        int n;
        cin>>n;
        ms.insert(n);
    }
    for(auto it: ms)
        cout<<it<<" ";
    return 0;
}


Time complexity: O(logn)

If we would have stored them in a normal array and then sorted the array,
the time complexity would have been : first O(n) to insert the values and then O(nlogn) to sort the values which is much more time than the above technique.




__________________________________________________________________________________________________________________________________________________________
