Date : 16th May, 2023
___________________________________________________________________________________________________________________________________________________________





// Set

Stores only unique elements in ascending order
Cannot directly acces elements as in an arr[index_to_be_accessed]
Use iterators to access elements of the set

insert() can be replaced with emplace().

st.size() gives size of the set.

3 types of erase functions: 
  i. st.erase(iterator);
  ii. st.erase( starting iterator, ending iterator )      // [)
  iii. st.erase( key );     --> key: the element you want to delete from the set
  
 erase() -  time complexity: O(log n)
 
 find( element ) -  returns an iterator to the element 
                    if element is not present, the find function returns st.end()

Code:

set<int> st;
int n;
cin>>n;
for(int i=0; i<n; i++)
{
  int x;
  cin>>x;
  
  st.insert(x);   --> insert function is used to insert an element into the set
                      This insert function uses O(log n) time complexity
                      
  *st.begin()+2   --> access elements in a set using iterators
  
  
  st.erase(st.begin(),st.begin()+2);    --> syntax: st.erase(iterator)  --> removes the elements    // [ starting itr, ending itr )
  st.erase(4);  // 4 element will be deleted from the set
  
  auto it = st.find(7);
}






We can initialse set with any data type, including struct.

for(auto it=st.begin(); it!=st.end(); it++)
{
  cout<<*it<<" ";
}

for(auto it: st)
{
  cout<<it<<" ";
}


// To delete an entire set
st.erase(st.begin(), st.end());


Summary :-

Mehtods:
  i.    insert() / emplace()
  ii.   iterators: begin(), end(), rbegin(), rend()
  iii.  erase()
  iv.   find()
  v.    size()
  
All operations on set have log(n) time complexity, which is pretty good.
  
  
  



___________________________________________________________________________________________________________________________________________________________






// Unordered Set:




unordered_set<int> st;

Here the avg case time complexity is O(1)
But the avg case time complexity is O(n).

We should use unordered_set whenever we don't need to store the elements in ascending order because it has a better avg case time complextiy.
But if the problem will give TLE using unordered_set, then we need to switch to set.
TLE indicates the worst case of unordered_set is occurring, which is very rare.

All the methods are the same as in set.







__________________________________________________________________________________________________________________________________________________________

