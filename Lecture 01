// Struct
struct Raj
{
  string name;
  int roll_no;
  int age;
  char gender;
};

int main()
{
  // not advised to use this method
  
  struct Raj obj;
  obj.roll_no=21;
  cout<<obj.roll_no;
 
// not sure of the below formats
  Raj *obj1 = new Raj("Souradip", 34, 21, 'M');
  Raj obj2 = Raj("Souradip", 34, 21, 'M');
  
  // not adviced to use the below method to declare objects of structures
  Raj obj3;
  obj3.name("Souradip");
  obj3.roll_no(32);
}








________________________________________________________________________________________________________________________________________________________



// Array containers -

Declaring an array in the global space will automatically initialise all the elements of the array with zero.
Declaring an array inside int main(), the elements of the array will have garbage values.

.at(index)    --> gives access to the element at the specified index of the array

.fill(number)   --> initialises all the elements of the array with the number

array<int,4> arr={3};   --> here only the first element is initialised to 3 and the rest of the elements are initialised to 0





// Iterators

.begin()  --> points to the first element

.end()  --> points to the address after the last element

.rbegin() --> points to the last element

.rend() --> points to the address before the first element

for reverse iterator, write ++ only in the increment condition of for loop. It will start from the end element and traverse the array backwards only.

// Code:

array<int, 5> arr = {1,2,3,4,5};
for(auto it: arr.begin(); it != arr.end(); it++)
{
  cout<<*it<<" ";
}

auto it --> it is a pointer - auto automatically takes the data type of the element that is present at the begin() location


// For-each loop

string s="zxhfsdajf";
for(auto ch: s)
  cout<<ch<<" ";
  
This iterates the loop from the begining till the end

front() - gives access to the first element of the array
back() - gives access to the last element of the array

cout<<arr.front();    --    displays the first element                    [ Similar for arr.back() ]
arr.front()=6;        --    allows us to modify the first element         [ Similar for arr.back() ]





____________________________________________________________________________________________________________________________________________________






We can declare an array of int/char/double data type of maximum size 10^6 within int main().
This becomes 10^7 when declared globally.

We can declare an array of boolean data type of maximum 10^7 elements inside int main().
This becomes 10^8 when we declare it globally.







____________________________________________________________________________________________________________________________________________________









Vectors

Size of a vector is doubled when its capacity is full as it gives a better time complexity to copy all the elements into the new array with double the size than it was initially.

Same rules for declaring arrays of maximum sizes apply for vectors too, while declaring inside int main() and globally.

If we're pushing back more than 10^6 times to a vector array of integers that has been declared inside int main(), the we will have the following error:
*Segmentation fault*    -->     this error happens when we try to access an array position that cannot be defined




Mehtods:

vec.push_back()   /   vec.emplace_back(element)   --> slightly faster than push_back() -- used in CP
vec.pop_back()
vec.size()
vec.capacity()
vec.emplace(position, element). --> position must be specified with the help of an iterator


// to copy a vector in another 
vector<int> arr(vec1);
vector<int> arr(vec1.begin(), vec1.end());
vector<int> arr(vec1.begin(), vec1.begin()+2);    // copies only till the second element of vec1
                                                  // this is because values are copied as [ vec1.begin, second value )
                                                  // for an array {1,2,3,4,5}.  vec1.begin() points at 1 and vec1.begin+2 points to 3
                                                  // but 3 will not be included 
                                                  // thus only 1 and 2 is copied
         
 









2-D Vectors

for( auto vctr: vec)
{
  for(auto it: vctr)
  {
    cout<< it <<" ";    // here we are running a for each loop, thus we don't need to de-reference it
                        // we would have had to use *it in case of a simple for loop
  }
  cout<<endl;
}
                                                  

// use these for each loops using iterators over traditional loops for CP because these have fewer lines of code


// how to define a 10x20 2-D vector
vector<vector<int>> vec(10, vector<int> arr(20, 0));
Here we are first declaring a vector vec and then specifying the initial size of the vector as 10.
Then we are initialising vec with integer vectors, each of size 20 and all elements initialised to zero.



int arr[4];   --> declares an array
Similarly,
vector<int> arr[4];   --> declares an array of 4 vectors


// to define a 3-D vector 10x20x30
vector<vector<vector<int>>> vec(10, vector<vector<int>> in_vec(20, vector<int> arr(30. 0) ));







_________________________________________________________________________________________________________________________________________________________
                                                  
                                                  
                                                  
                                                  
                                                  
                                                  
                                                  
                                                  
                                                  
