// Array containers

Declaring an array in the global space will automatically initialise all the elements of the array with zero.
Declaring an array inside int main(), the elements of the array will have garbage values.

.at(index)    --> gives access to the element at the specified index of the array

.fill(number)   --> initialises all the elements of the array with the number

array<int,4> arr={3};   --> here only the first element is initialised to 3 and the rest of the elements are initialised to 0





// Iterators

.begin()  --> points to the first element

.end()  --> points to the address after the last element

.rbegin() --> points to the last element

.rend() --> points to the address before the first element

for reverse iterator, write ++ only in the increment condition of for loop. It will start from the end element and traverse the array backwards only.

// Code:

array<int, 5> arr = {1,2,3,4,5};
for(auto it: arr.begin(); it != arr.end(); it++)
{
  cout<<*it<<" ";
}

auto it --> it is a pointer - auto automatically takes the data type of the element that is present at the begin() location


// For each loop

string s="zxhfsdajf";
for(auto ch: s)
  cout<<ch<<" ";
  
This iterates the loop from the begining till the end

front() - gives access to the first element of the array
back() - gives access to the last element of the array




____________________________________________________________________________________________________________________________________________________






We can declare an array of int/char/double data type of maximum size 10^6 within int main().
This becomes 10^7 when declared globally.

We can declare an array of boolean data type of maximum 10^7 elements inside int main().
This becomes 10^8 when we declare it globally.







____________________________________________________________________________________________________________________________________________________









Vectors

Size of a vector is doubled when its capacity is full as it gives a better time complexity to copy all the elements into the new array with double the size than it was initially.

Same rules for declaring arrays of maximum sizes apply for vectors too, while declaring inside int main() and globally.

If we're pushing back more than 10^6 times to a vector array of integers that has been declared inside int main(), the we will have the following error:
*Segmentation fault*    -->     this error happens when we try to access an array position that cannot be defined
